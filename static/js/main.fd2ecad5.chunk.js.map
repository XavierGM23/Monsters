{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/scroll/scroll.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","Scroll","children","App","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2VAGaA,EAAO,SAACC,GACjB,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAG,gBAAWL,EAAMG,QAAQC,MACxG,6BAAKJ,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCJbC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAyBA,QAASA,GAArBA,EAAQC,UCLpBO,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,sBAAKZ,UAAU,aAAf,UACA,+DACA,uBACIA,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,SCRTG,G,MAAS,SAAChB,GACnB,OACI,qBAAKC,UAAU,SAAf,SACKD,EAAMiB,aCmDJC,E,kDAlDb,aAAe,IAAD,8BACZ,gBAcFL,aAAe,SAACM,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbzC,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACX,SAAUoB,S,oBAQ1C,WAAU,IAAD,EAE2BC,KAAKN,MAA/Bf,EAFD,EAECA,SAAUY,EAFX,EAEWA,YACZU,EAAmBtB,EAASuB,QAAO,SAAA7B,GAAO,OAC9CA,EAAQG,KAAK2B,cAAcC,SAASb,EAAYY,kBAIlD,OACE,sBAAKhC,UAAU,MAAf,UACA,iDAGA,cAAC,EAAD,CACEW,YAAY,6BACZC,aAAciB,KAAKjB,eAIrB,cAAC,EAAD,UAEI,cAAC,EAAD,CAAUJ,SAAUsB,a,GA1CZI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fd2ecad5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.component.styles.css';\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n    <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set1&size=180x180`} alt={`Robot_${props.monster.id}`}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n    );\r\n}","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n        {props.monsters.map(monster => ( \r\n            <Card key = {monster.id} monster={monster}/>\r\n          ))\r\n        }      \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return (\r\n        <div className='search-box'>\r\n        <p>Search some fun robot avatars:</p>\r\n        <input \r\n            className='search'\r\n            type=\"search\" \r\n            placeholder={placeholder}\r\n            onChange={handleChange}\r\n        />\r\n        </div>\r\n        \r\n    );\r\n}","import React from 'react';\r\nimport './scroll.component.styles.css';\r\n\r\nexport const Scroll = (props) => {\r\n    return(\r\n        <div className=\"scroll\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React , {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component'\nimport {Scroll} from './components/scroll/scroll.component'\n\nclass App extends Component {\n  constructor() {\n    super(); // Adopta las caracteristicas de COMPONENT\n\n    this.state = {  // da valores al estado de APP\n      monsters: [], // genera un arreglo vacio el cual se renderiza luego\n      searchfield: '' // Genera una busqueda vacia la cual se renderiza luego\n    };\n  }\n\n  componentDidMount() { // Actua en 4to orden\n    fetch(\"https://jsonplaceholder.typicode.com/users\") // Permite ingresar pedidos Get y trabaja con promesas\n    .then(response => response.json())  //Transforma a formato JSON\n    .then(users => this.setState({monsters: users})); //Asigna los usuarios del fetch a monsters\n  }\n\n  handleChange = (event) => {\n    this.setState({searchfield: event.target.value});\n  }\n\n\n  render() {\n\n    const { monsters, searchfield } = this.state; // Destructuring \n    const filteredMonsters = monsters.filter(monster =>  // Itera y filtra el arreglo \n      monster.name.toLowerCase().includes(searchfield.toLowerCase()) // Compara entre los 2 arreglos\n    );\n\n\n    return (\n      <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n\n      {/* SEARCHBOX COMPONENT */}\n      <SearchBox \n        placeholder='Search Robots ðŸ¤–'\n        handleChange={this.handleChange}\n\n      />\n      \n      <Scroll>\n          {/* CARDLIST COMPONENT */}\n          <CardList monsters={filteredMonsters}/>\n      </Scroll>\n      \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}